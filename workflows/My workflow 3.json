{"createdAt":"2025-01-05T13:35:29.331Z","updatedAt":"2025-01-05T13:48:13.000Z","id":"Uuo37aruQZb7xXZy","name":"My workflow 3","active":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,0],"id":"477fab87-ff27-46a2-9904-53d54edf18f3","name":"When clicking ‘Test workflow’"},{"parameters":{"html":"<div class=\"break-word glass absolute bottom-0 left-0 right-0 top-0 overflow-auto bg-base-200 pb-20 pl-20\"><div class=\"sticky top-0 flex justify-between bg-base-200 py-4 pr-4 text-neutral\"><span class=\"text-xl\">Transcript</span><div class=\"flex gap-2\"><button class=\"btn btn-circle btn-ghost btn-sm\"><svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" class=\"h-6 w-6\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.9997 10.5865L16.9495 5.63672L18.3637 7.05093L13.4139 12.0007L18.3637 16.9504L16.9495 18.3646L11.9997 13.4149L7.04996 18.3646L5.63574 16.9504L10.5855 12.0007L5.63574 7.05093L7.04996 5.63672L11.9997 10.5865Z\"></path></svg></button></div></div><p class=\"text-neutral\"><span class=\"link link-primary\">0:01</span> <span class=\"\">applications, namely\nprompt templates, models, and</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:04</span> <span class=\"\">parsers.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:05</span> <span class=\"\">And you'll learn a bit about how to\ncombine them together to create chains</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:08</span> <span class=\"\">with LangChain Expression\nLanguage.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:10</span> <span class=\"\">Let's dive in.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:17</span> <span class=\"\">Before we get too far in, let's\ntackle the elephant in the room. Why</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:20</span> <span class=\"\">LangChain.js?</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:21</span> <span class=\"\">Well, JavaScript is the\nbiggest ecosystem of</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:24</span> <span class=\"\">developers in the world,\nand many of them prefer,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:27</span> <span class=\"\">surprisingly, to use JavaScript.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:29</span> <span class=\"\">You also might choose\nit for some of</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:32</span> <span class=\"\">the easy deployment tools\nand powerful scaling features</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:34</span> <span class=\"\">of frameworks like Next.js, cloud\nofferings like Vercel's Edge</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:37</span> <span class=\"\">functions or Cloudflare Workers, and generally\nthe advanced tool chains that</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:41</span> <span class=\"\">come with them. You also\nmight want to build</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:44</span> <span class=\"\">for multiple platforms or\ndifferent platforms.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:46</span> <span class=\"\">If you're building directly in\nthe browser for</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:48</span> <span class=\"\">Chrome extensions or\nmobile apps with React Native, desktop</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:51</span> <span class=\"\">apps with Electron, environments\nlike that. Another</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:53</span> <span class=\"\">housekeeping note, this\nnotebook uses the Deno Jupyter kernel,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:56</span> <span class=\"\">which is a JavaScript\nruntime with slight</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">0:58</span> <span class=\"\">differences from node\nand web environments.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:01</span> <span class=\"\">For the most part, you'll be able to\ncopy paste code directly into different</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:04</span> <span class=\"\">environments.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:05</span> <span class=\"\">And when there are differences, we'll\ncall them out. So a bit about</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:08</span> <span class=\"\">LangChain Expression Language.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:09</span> <span class=\"\">LangChain uses this\nto compose chains</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:10</span> <span class=\"\">of components together,\nand components that</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:13</span> <span class=\"\">implement and are usable with this\nlanguage are called runnables.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:18</span> <span class=\"\">They define some core\nmethods and an allowed</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:20</span> <span class=\"\">set of input types,\nand output types.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:22</span> <span class=\"\">And allow you to use\nmethods like invoke stream and</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:25</span> <span class=\"\">batch right out of the box,\nwhich are all common</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:28</span> <span class=\"\">methods used when building\nand using LLM applications, there's</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:31</span> <span class=\"\">also means of modifying\nparameters at runtime with</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:34</span> <span class=\"\">the bind method. So\na concrete example of this</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:36</span> <span class=\"\">is the prompt LLM output\nparser trio that we'll be</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:39</span> <span class=\"\">going over in this lesson. And some\nother benefits of the</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:42</span> <span class=\"\">runnable protocol are that\nyou get fallbacks and</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:45</span> <span class=\"\">parallelism right out of\nthe box with our</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:47</span> <span class=\"\">batch method, as well\nas logging and tracing built</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:50</span> <span class=\"\">in via LangSmith, our tracing\nand observability tool. Throughout the</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:54</span> <span class=\"\">course, we'll link to\na few explorable traces in LangSmith</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">1:57</span> <span class=\"\">that illustrate how\ndifferent chains work.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:00</span> <span class=\"\">Let's start with one of the most\nfundamental pieces of</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:02</span> <span class=\"\">LangChain, the language model. And\nLangchain supports two</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:05</span> <span class=\"\">different types of\nlanguage model.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:07</span> <span class=\"\">In fact, there are text LLMs,\nwhich take a string as input</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:11</span> <span class=\"\">and return a string as output.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:13</span> <span class=\"\">So string to string.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:15</span> <span class=\"\">And then there are chat models,\nwhich take a list</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:19</span> <span class=\"\">of messages as input\nand return a single message output.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:26</span> <span class=\"\">And examples of text\nmodels are things like</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:29</span> <span class=\"\">popular apps like ChatGPT and GPT-4.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:31</span> <span class=\"\">So because they look like strings,\ntext LLM inputs and</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:33</span> <span class=\"\">outputs are easy to visualize.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:35</span> <span class=\"\">So let's look at what calling a\nchat model directly looks like.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:38</span> <span class=\"\">So we'll\nimport some environment variables. We'll</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:40</span> <span class=\"\">be using OpenAI's GPT 3.5 Turbo for the\nmajority of the course, which is a chat</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:45</span> <span class=\"\">model.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:45</span> <span class=\"\">And we'll\nimport the LangChain wrapper for it, as</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:49</span> <span class=\"\">import chat OpenAI from\nLangChain chat models OpenAI.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:53</span> <span class=\"\">Then we'll\nimport a human message class that we'll use</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:55</span> <span class=\"\">to wrap and create our\nchat model inputs.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">2:59</span> <span class=\"\">And then we'll\ninitialize our model like so.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:07</span> <span class=\"\">And again, be using GPT-Turbo.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:11</span> <span class=\"\">And we'll use the latest version\nof time of filming, which</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:13</span> <span class=\"\">was from November 6th.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:17</span> <span class=\"\">And then let's try querying it, or\ninvoking it with a list of messages, which</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:24</span> <span class=\"\">in this case will just be\na single human</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:26</span> <span class=\"\">message corresponding to\nour input. Tell me a joke. We'll also</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:34</span> <span class=\"\">be testing ChatGPT's humor here\nor rather opening eyes</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:36</span> <span class=\"\">humor. Cool. Let's give it\na try why don't skeletons fight each other?</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:45</span> <span class=\"\">They don't have the guts.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:47</span> <span class=\"\">Hilarious. So one thing you'll\nnotice about the message</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:49</span> <span class=\"\">output from the chat\nmodel is that it</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:51</span> <span class=\"\">contains a content field\ncontaining the text value</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:53</span> <span class=\"\">of the message, and\nan associated role that</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:55</span> <span class=\"\">corresponds to the entity\nsending the message. In</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">3:57</span> <span class=\"\">this case, we started with the human\nsending the original message, which</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:00</span> <span class=\"\">is us, and the AI responded with\nan AI message.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:03</span> <span class=\"\">And again, while we're using GPT 3.5 Turbo,\nLangChain supports models from many</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:06</span> <span class=\"\">different providers, and you\ncan try swapping the</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:08</span> <span class=\"\">provided class in any\nof the code examples.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:11</span> <span class=\"\">So here's a good place to pause and\ntry editing the prompt yourself, or</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:15</span> <span class=\"\">the message yourself rather, to\ntell a specific joke, perhaps</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:17</span> <span class=\"\">about parrots, or\neven change the input</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:19</span> <span class=\"\">message to ask about\nsomething else entirely.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:21</span> <span class=\"\">Give it a shot.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:23</span> <span class=\"\">OK, let's\nmove on to another building block, the</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:25</span> <span class=\"\">prompt template. So\nwhile calling models in</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:27</span> <span class=\"\">isolation can be useful, as\nyou saw above, and</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:29</span> <span class=\"\">you can do some pretty\nadvanced things with that, it's</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:32</span> <span class=\"\">often more convenient to\nfactor out the logic behind model</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:34</span> <span class=\"\">inputs into reusable\nparameterized components, rather</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:38</span> <span class=\"\">than typing out the full\nquery each time. And for</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:41</span> <span class=\"\">this, LangChain includes\nprompt templates, which are</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:42</span> <span class=\"\">responsible for formatting\nuser input for later model calls.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:45</span> <span class=\"\">Let's see what that looks like. We'll import\na chat prompt template</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:48</span> <span class=\"\">class here and initialize\nit like so.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:51</span> <span class=\"\">What are three good names\nfor a company that makes product?</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:55</span> <span class=\"\">One thing to note here, we've\ndenoted an input variable</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">4:59</span> <span class=\"\">using curly braces, in\nthis case product, and</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:01</span> <span class=\"\">anything we pass into the prompt\nwill be injected</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:04</span> <span class=\"\">and formatted into\nthis part. Prompt</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:06</span> <span class=\"\">templates are also useful\nfor smoothing over some</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:09</span> <span class=\"\">of the differences in\nmodel input types.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:11</span> <span class=\"\">Here we construct a prompt\ntemplate directly from a string,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:13</span> <span class=\"\">but we can use\nthis prompt template to</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:16</span> <span class=\"\">generate both string input\nfor an LLM using</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:18</span> <span class=\"\">the format method like this,\nand this is how</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:20</span> <span class=\"\">coincidentally we pass input\nvariables. So we'll</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:23</span> <span class=\"\">say colorful socks for\na product and that'll get</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:26</span> <span class=\"\">injected to our prompt\nright here.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:29</span> <span class=\"\">Let's have a question mark so it's not.\nSo there we go.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:34</span> <span class=\"\">And if you run this,\nwe get a string output</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:37</span> <span class=\"\">with a human prefix because we've\ncreated a chat prompt template.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:41</span> <span class=\"\">We get what are\nthree good names for</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:42</span> <span class=\"\">a company that makes colorful socks.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:44</span> <span class=\"\">And we get a string output,\nwhich is also our input variable here.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:47</span> <span class=\"\">So this is output we\ncould pass directly to an LLM,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:50</span> <span class=\"\">but we can also\nformat our prompt to</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:52</span> <span class=\"\">output a message array\nuseful for calling chat models.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:55</span> <span class=\"\">So await prompt\nformat messages this time, and we'll</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">5:58</span> <span class=\"\">give it the same\nproduct because who doesn't love</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:01</span> <span class=\"\">colorful socks?</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:02</span> <span class=\"\">Colorful socks.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:03</span> <span class=\"\">And this time we get a single human\nmessage within an array</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:06</span> <span class=\"\">that we could pass\ndirectly to our chat model ,and you'll</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:09</span> <span class=\"\">notice that if we use this from template\nmethod with a string</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:12</span> <span class=\"\">as input for convenience, we\nturn that into a human message here, but</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:15</span> <span class=\"\">we can also create a prompt\ntemplate for messages</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:18</span> <span class=\"\">directly for finer\ngrading control over</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:19</span> <span class=\"\">what types of messages are passed\nto the prompt.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:22</span> <span class=\"\">For example many models\nand model providers rely</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:25</span> <span class=\"\">on a system message\nto define certain behavior,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:27</span> <span class=\"\">and this is a great\nway to format your input.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:31</span> <span class=\"\">So here's an example.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:32</span> <span class=\"\">We'll\nimport some other methods here, and</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:34</span> <span class=\"\">then we'll create our prompt slightly\ndifferently using these</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:36</span> <span class=\"\">new message prompt\ntemplates.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:38</span> <span class=\"\">So prompt for messages\nwill be a chat</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:40</span> <span class=\"\">prompt template from these messages.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:41</span> <span class=\"\">And now this time,\ninstead of constructing our</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:43</span> <span class=\"\">prompt template from a string, we're\ngoing to construct it from a</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:46</span> <span class=\"\">system message prompt\ntemplate and a human message prompt</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:48</span> <span class=\"\">template such that\nour output and our formatted output</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:51</span> <span class=\"\">rather, our output will be multiple\nformatted messages instead of</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:53</span> <span class=\"\">just a single one.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:55</span> <span class=\"\">So let's\ntry it with a product shiny objects.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">6:58</span> <span class=\"\">And this time we get a system message,\nwhich remains the same because we didn't</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:01</span> <span class=\"\">have any template variables here. And\na human message, what</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:05</span> <span class=\"\">are three good names\nfor a company that</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:07</span> <span class=\"\">makes shiny objects?</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:09</span> <span class=\"\">Awesome.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:10</span> <span class=\"\">And some nice shorthand for this,\nby the way, so you don't</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:12</span> <span class=\"\">have to import those\nmessage prompt template classes.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:14</span> <span class=\"\">Let's just use a tuple with the\nrole of the template. So for</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:17</span> <span class=\"\">example, we can\ninitialize it like this.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:20</span> <span class=\"\">The same exact output as before,\nbut instead of using</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:22</span> <span class=\"\">those message prompt templates,\nwe use tuple with the</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:25</span> <span class=\"\">role and then the template string.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:27</span> <span class=\"\">And if we run format,\nwe get the exact same output.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:29</span> <span class=\"\">So this will be useful later\nfor passing around</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:31</span> <span class=\"\">history because you\ncan inject history</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:32</span> <span class=\"\">messages directly into the prompt.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:38</span> <span class=\"\">Though we can pass these formatted\nvalues directly into a model, there's</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:41</span> <span class=\"\">actually a more elegant\nway to use prompts</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:42</span> <span class=\"\">and models together that we'll go\nover next.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:45</span> <span class=\"\">And we've already mentioned it. That's\nright, it's expression language,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:48</span> <span class=\"\">or LCEL for\nshort.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:51</span> <span class=\"\">LCEL is a composable syntax for\nchaining LangChain models together.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:55</span> <span class=\"\">And again,\nobjects that are compatible</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:56</span> <span class=\"\">with LCEL are called runnables.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">7:58</span> <span class=\"\">We can construct a\nsimple chain from the</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:00</span> <span class=\"\">prompt and model we\ndeclared above like this.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:02</span> <span class=\"\">We'll use this pipe method. And\nwhat this is going to do is it's going</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:06</span> <span class=\"\">to create a chain where the input is\nthe same as the first step in the</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:09</span> <span class=\"\">sequence, our prompt here, which in\nthis case will be</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:12</span> <span class=\"\">an object with a\nsingle property called product.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:13</span> <span class=\"\">The prompt template is invoked\nwith this input and passes the</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:17</span> <span class=\"\">properly formatted result\nas input into the next step</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:20</span> <span class=\"\">of the chain, the chat\nmodel here.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:23</span> <span class=\"\">Here's what it looks like in action.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:25</span> <span class=\"\">There we go, await chain.invoke, Products\ncolorful socks.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:36</span> <span class=\"\">If you recall, the prompt asked the\nLLM to describe three</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:40</span> <span class=\"\">fun names for a\ncompany that makes this product.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:42</span> <span class=\"\">And if we run it, that's\nexactly what we'll see a single chat</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:47</span> <span class=\"\">message response with\nthree fun names for a company</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:50</span> <span class=\"\">that makes colorful socks chroma sock\nbright step color vibe sock comb.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:54</span> <span class=\"\">The final\nconsideration we'll go over</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:56</span> <span class=\"\">in this lesson is formatting\nour output. For example, it's</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">8:59</span> <span class=\"\">often easier to work with the raw\nstring value of a chat models's output rather</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:04</span> <span class=\"\">than an\nAI message.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:06</span> <span class=\"\">And the LangChain abstract for this\nis called an output parser. So we'll</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:10</span> <span class=\"\">import it like this.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:11</span> <span class=\"\">This is one that will\ntake our chat model output,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:13</span> <span class=\"\">a single message,\nand coerce it into a string. So let's</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:19</span> <span class=\"\">redeclare our chain like this.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:31</span> <span class=\"\">Awesome.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:32</span> <span class=\"\">Now, if we run this chain again,\nperhaps with a more fun name,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:37</span> <span class=\"\">or a different product rather, let's\nsee if we can generate</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:41</span> <span class=\"\">some good names for a\ncompany that makes fancy cookies.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:45</span> <span class=\"\">And this time you'll\nsee we get three names like before, but</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:48</span> <span class=\"\">this time instead of\na chat message output we get a string.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:52</span> <span class=\"\">Delicate crumbs,\nGourmet Cookie Creations,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:54</span> <span class=\"\">and Elegant Sweets Co.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:57</span> <span class=\"\">These three pieces form the\ncore of many complicated chains,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">9:59</span> <span class=\"\">so it's important to get a good\nhandle on them now. And if you're more</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:03</span> <span class=\"\">of a visual person, you can\ncheck out this Langsmith</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:05</span> <span class=\"\">trace illustrating what's going\non internally.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:08</span> <span class=\"\">And I'll paste it here and let's go\nlook at it.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:10</span> <span class=\"\">So we see that we\nhave a runnable sequence here,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:12</span> <span class=\"\">which corresponds to our chain.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:14</span> <span class=\"\">And that wraps a few steps here.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:17</span> <span class=\"\">First, our chat prompt template,\nwhere it takes in our input,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:20</span> <span class=\"\">fancy cookies, that's a product, and\ninjects it into the prompt. It</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:24</span> <span class=\"\">outputs a single human message\nwrapped in an array, and</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:26</span> <span class=\"\">that's the format that our chat\nmodel expects here.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:29</span> <span class=\"\">So our input, what are three good\nnames for a company</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:31</span> <span class=\"\">that makes fancy cookies?</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:32</span> <span class=\"\">And the output, an AI message with\nthree good names for</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:35</span> <span class=\"\">a company that makes fancy cookies.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:38</span> <span class=\"\">And then finally,\na string output parser</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:39</span> <span class=\"\">converts that from an\nAI message into a string.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:43</span> <span class=\"\">And by the way, while these pipe\noperations are convenient</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:45</span> <span class=\"\">for small numbers of outputs,\nthey can get a little</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:47</span> <span class=\"\">unwieldy for more complicated chains.\nFor this,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:50</span> <span class=\"\">you can use the runnableSequence.from\nmethod to construct a chain</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:55</span> <span class=\"\">from an array of runnables.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">10:58</span> <span class=\"\">Here's how it works. We'll import\nit here.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:04</span> <span class=\"\">And we'll reconstruct our chain above\nusing that method, and it's as</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:10</span> <span class=\"\">simple as prompt model\noutput parser. And that's</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:14</span> <span class=\"\">equivalent to the pipe operation\nabove.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:18</span> <span class=\"\">So let's invoke it and see.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:22</span> <span class=\"\">And yep, we get three names for\na company that makes fancy cookies.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:28</span> <span class=\"\">And let's go over some of\nthe other methods that</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:30</span> <span class=\"\">we get for free\nwith expression language here.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:32</span> <span class=\"\">One is streaming.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:33</span> <span class=\"\">That's a very important one\nfor many of you in the webdev community,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:36</span> <span class=\"\">and we'll take\ngreat advantage of that later. But all</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:39</span> <span class=\"\">these runnables and\nsequences of runnables</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:41</span> <span class=\"\">themselves are also\nrunnables, by the way, get a</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:43</span> <span class=\"\">dot stream method which returns output\nfrom the chain in an iterable</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:47</span> <span class=\"\">stream. And because\nLLM responses often take a</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:49</span> <span class=\"\">long time to finish, this is\nuseful in situations where showing feedback</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:53</span> <span class=\"\">quickly is important.\nAnd here's an example</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:55</span> <span class=\"\">with the chain we just composed.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:57</span> <span class=\"\">You'll see here that we\ncall this dot stream</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">11:58</span> <span class=\"\">method instead of dot\ninvoke with a different</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:00</span> <span class=\"\">product name this time, really\ncool robots.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:03</span> <span class=\"\">And we can use\nthis asynciterator syntax for await,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:07</span> <span class=\"\">const chunk of stream.\nTo loop over the</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:10</span> <span class=\"\">return and stream chunks\nfrom our stream above.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:14</span> <span class=\"\">And when we run it, you'll\nsee we get three</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:17</span> <span class=\"\">names for companies that\nmake really cool robots, but</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:20</span> <span class=\"\">this time, instead\nof a single chunk back, we</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:22</span> <span class=\"\">get individual string\nchunks containing part</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:24</span> <span class=\"\">of our output.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:25</span> <span class=\"\">Robotech Innovations,\nFutureBot Solutions,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:28</span> <span class=\"\">and MechanoWorks Unlimited.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:30</span> <span class=\"\">And we could show these in\na front end application much more</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:33</span> <span class=\"\">quickly than waiting for the entire\nresponse.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:35</span> <span class=\"\">You'll also note that the\noutput parser transforms those</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:37</span> <span class=\"\">chunks from the model\nas they are generated, resulting</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:39</span> <span class=\"\">in string output chunks\nrather than models.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:42</span> <span class=\"\">And finally, let's look at batch.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:44</span> <span class=\"\">This is useful for\nperforming concurrent</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:45</span> <span class=\"\">operations and multiple generations\nsimultaneously.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:49</span> <span class=\"\">To show what this looks like, we'll\ndefine a set of inputs as an array, and</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:52</span> <span class=\"\">each one of these\nshould match the syntax</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:54</span> <span class=\"\">that our prompt template\ntakes. So</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">12:56</span> <span class=\"\">product will be some new product, let's\nsay large calculators, a little</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:01</span> <span class=\"\">whimsical, and product\nalpaca-wool-sweaters.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:07</span> <span class=\"\">And this time,\ninstead of using streamer invoke,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:09</span> <span class=\"\">we'll use the dot batch method.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:11</span> <span class=\"\">And what we expect to see are two\nstring outputs corresponding to</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:15</span> <span class=\"\">names for two different companies.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:17</span> <span class=\"\">The first that would make large\ncalculators.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:19</span> <span class=\"\">So we have BigCalco, GiantDigits nc,\nand JumboMath Solutions.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:23</span> <span class=\"\">And a second that\nwould make Alpaca Wool Sweaters,</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:26</span> <span class=\"\">which you can see here are not too bad.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:30</span> <span class=\"\">So now you've seen some of\nthe fundamental modules</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:32</span> <span class=\"\">behind LangChain and\nLangChain Expression Language, the</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:34</span> <span class=\"\">glue that holds them all together. Feel\nfree to pause before going on</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:38</span> <span class=\"\">to the next lesson and try\nmodifying some of these prompts and</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:41</span> <span class=\"\">templates and even\nexpression language chains</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:43</span> <span class=\"\">for yourself to get a better\nsense of how they fit together.</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:46</span> <span class=\"\">We'll see\nyou in the next lesson where we'll go over</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:49</span> <span class=\"\">the basics of retrieval augmented generation\nand talk about</span></p><p class=\"text-neutral\"><span class=\"link link-primary\">13:52</span> <span class=\"\">loading and preparing\nour data.</span></p></div>"},"type":"n8n-nodes-base.html","typeVersion":1.2,"position":[220,0],"id":"43a8512e-d302-4cc9-995d-0459a1b60480","name":"HTML"}],"connections":{"When clicking ‘Test workflow’":{"main":[[{"node":"HTML","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"acdfd78a-3857-4d15-9857-e789412d636a","triggerCount":0,"tags":[]}