{"createdAt":"2024-12-24T16:48:51.352Z","updatedAt":"2024-12-28T08:08:37.000Z","id":"2f8IZsiavF89RYoO","name":"Youtube Summarize","active":true,"nodes":[{"parameters":{"jsCode":"function getVideoId(url) {\n  // Handle youtu.be format\n  if (url.includes('youtu.be/')) {\n    const id = url.split('youtu.be/')[1].split('?')[0];\n    return id;\n  }\n  \n  // Handle youtube.com format\n  if (url.includes('youtube.com/watch')) {\n    const matches = url.match(/[?&]v=([^&#]+)/);\n    return matches ? matches[1] : null;\n  }\n  \n  return null;\n}\n\nasync function processSingle(item, index) {\n  const url = item?.json?.url || item?.url;\n  const lang = item?.json?.language || 'ko'; // Default to Korean if not specified\n  \n  if (!url) {\n    return {\n      json: {\n        error: `No URL found in item ${index}`,\n        inputReceived: JSON.stringify(item)\n      }\n    };\n  }\n\n  try {\n    const videoId = getVideoId(url);\n    if (!videoId) {\n      return {\n        json: {\n          error: 'Could not extract video ID from URL',\n          url: url\n        }\n      };\n    }\n\n    return {\n      json: {\n        videoId,\n        language: lang,\n        pageUrl: `https://www.youtube.com/watch?v=${videoId}`,\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          'Accept-Language': `${lang},en-US;q=0.9`  // Prioritize the requested language\n        }\n      }\n    };\n  } catch (error) {\n    return {\n      json: {\n        error: error.message,\n        errorDetail: error.toString(),\n        url,\n        inputItem: JSON.stringify(item)\n      }\n    };\n  }\n}\n\n// Process all items\nconst results = await Promise.all(items.map(processSingle));\nreturn results;"},"id":"f08dbe92-9966-413d-a874-2c1842e83f38","name":"Extract Video ID","type":"n8n-nodes-base.code","typeVersion":2,"position":[420,0]},{"parameters":{"url":"={{ $json.pageUrl }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"={{ $json.headers[\"User-Agent\"] }}"},{"name":"Accept-Language","value":"={{ $json.headers[\"Accept-Language\"] }}"}]},"options":{}},"id":"910d4d2b-c25c-4c48-82e9-02190dba9988","name":"Fetch YouTube Page","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[620,0]},{"parameters":{"jsCode":"// for (const item of items) {\n//   const html = item.json.data;\n//   const targetLang = item.json.language || 'en';  // Default to English\n  \n//   // Extract the transcript data\n//   const transcriptMatch = html.match(/\"captionTracks\":\\[(.*?)\\]/);\n//   if (!transcriptMatch) {\n//     item.json = { error: 'No transcript data found' };\n//     continue;\n//   }\n\n//   // Parse the caption tracks\n//   const captionTracks = JSON.parse(`[${transcriptMatch[1]}]`);\n  \n//   // Look for the requested language\n//   const targetTrack = captionTracks.find(track => \n//     track.languageCode === targetLang || \n//     track.vssId?.includes(`.${targetLang}`)\n//   );\n\n//   if (!targetTrack) {\n//     // If target language not found, try auto-generated version\n//     const autoTrack = captionTracks.find(track => \n//       track.kind === \"asr\" && \n//       (track.languageCode === targetLang || track.vssId?.includes(`.${targetLang}`))\n//     );\n    \n//     if (!autoTrack) {\n//       item.json = { \n//         error: `No ${targetLang} transcript found (neither manual nor auto-generated)`,\n//         availableLanguages: captionTracks.map(track => ({\n//           code: track.languageCode,\n//           kind: track.kind,\n//           name: track.name?.simpleText\n//         }))\n//       };\n//       continue;\n//     }\n    \n//     item.json.transcriptUrl = autoTrack.baseUrl;\n//   } else {\n//     item.json.transcriptUrl = targetTrack.baseUrl;\n//   }\n// }\n\n// return items;\n\nfor (const item of items) {\n  const html = item.json.data;\n  const targetLang = item.json.language || 'en'; // Default to English\n\n  // Extract the transcript data\n  const transcriptMatch = html.match(/\"captionTracks\":\\[(.*?)\\]/);\n  if (!transcriptMatch) {\n    item.json = { error: 'No transcript data found' };\n    continue;\n  }\n\n  // Parse the caption tracks\n  const captionTracks = JSON.parse(`[${transcriptMatch[1]}]`);\n\n  // Function to find a transcript by language\n  const findTranscriptByLanguage = (lang) => {\n    return captionTracks.find(track => \n      track.languageCode === lang || \n      track.vssId?.includes(`.${lang}`)\n    );\n  };\n\n  // Attempt to find the target language transcript\n  let transcript = findTranscriptByLanguage(targetLang);\n\n  // If not found, try auto-generated version\n  if (!transcript) {\n    transcript = captionTracks.find(track => \n      track.kind === \"asr\" && \n      (track.languageCode === targetLang || track.vssId?.includes(`.${targetLang}`))\n    );\n  }\n\n  // If still not found, iterate through all available languages\n  if (!transcript) {\n    for (const track of captionTracks) {\n      transcript = findTranscriptByLanguage(track.languageCode);\n      if (transcript) break;\n    }\n  }\n\n  // Handle the result\n  if (transcript) {\n    item.json.transcriptUrl = transcript.baseUrl;\n    item.json.languageUsed = transcript.languageCode;\n  } else {\n    item.json = { \n      error: `No transcript found for ${targetLang} or other available languages.`,\n      availableLanguages: captionTracks.map(track => ({\n        code: track.languageCode,\n        kind: track.kind,\n        name: track.name?.simpleText\n      }))\n    };\n  }\n}\n\nreturn items;\n"},"id":"ef4cbec4-4c3c-469b-978f-3ede7dfad5a9","name":"Extract Transcript URL","type":"n8n-nodes-base.code","typeVersion":2,"position":[800,-40],"retryOnFail":false,"maxTries":2},{"parameters":{"url":"={{ $json.transcriptUrl }}","sendHeaders":true,"headerParameters":{"parameters":[{"name":"User-Agent","value":"={{ $('Extract Video ID').item.json.headers[\"User-Agent\"] }}"},{"name":"Accept-Language","value":"={{ $('Extract Video ID').item.json.headers[\"Accept-Language\"] }}"}]},"options":{}},"id":"b40596f9-397e-40ff-8cc4-ba82c1c9e263","name":"Fetch Transcript","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1000,20],"retryOnFail":false},{"parameters":{"jsCode":"for (const item of items) {\n  const xml = item.json.data;\n  \n  // Parse the XML transcript\n  const lines = xml.match(/<text[^>]*>(.*?)<\\/text>/g) || [];\n  const transcript = lines.map(line => {\n    // Decode HTML entities and remove XML tags\n    const text = line\n      .replace(/<[^>]*>/g, '')\n      .replace(/&quot;/g, '\"')\n      .replace(/&amp;/g, '&')\n      .replace(/&lt;/g, '<')\n      .replace(/&gt;/g, '>')\n      .replace(/&#39;/g, \"'\")\n      .trim();\n    return text;\n  }).join('\\n');  // Join with newlines for better Korean text readability\n\n  item.json = {\n    transcript,\n    videoId: item.json.videoId,\n    language: item.json.language\n  };\n}\n\nreturn items;"},"id":"80bd0264-4893-44bf-9502-f6b06fdbdccc","name":"Format Transcript","type":"n8n-nodes-base.code","typeVersion":2,"position":[1140,20]},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1,"position":[2400,-300],"id":"12f003e4-8b01-42df-9aa3-cfce4fe37669","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"lg3WEXtgqxQtkuGE","name":"OpenAi account"}}},{"parameters":{"promptType":"define","text":"=태그와 검색어를 기반으로 구글에서 관련 Youtube 영상을 검색해서 관련도 순으로 3개만   url을 나열해줘. 단, 검색은 딱 한번만 해.\n\n태그:  {{ $json.output.tags }}\n검색어: {{ $json.output.search_term }}","hasOutputParser":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[2440,-640],"id":"64c10525-bf2c-40e8-9282-ddfd5829974f","name":"AI Agent"},{"parameters":{"url":"https://serpapi.com/search","sendQuery":true,"parametersQuery":{"values":[{"name":"api_key","valueProvider":"fieldValue","value":"9ecad515af0605ae5ff374d98a2887acde2c1f44260b2b5d7ded064add61aabf"},{"name":"q"}]}},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[2580,-360],"id":"ade2aa68-1d32-4cc2-b437-7b69236ff49b","name":"HTTP Request"},{"parameters":{"text":"={{ $json.transcript }}","attributes":{"attributes":[{"name":"tags","description":"Tags that can be fetched from the transcript","required":true},{"name":"search_term","description":"The multiple search terms that can used for searching related contents","required":true}]},"options":{}},"type":"@n8n/n8n-nodes-langchain.informationExtractor","typeVersion":1,"position":[2000,-560],"id":"e98d2ec7-cc04-4227-8eb2-3028e9dbac2d","name":"Information Extractor"},{"parameters":{"options":{"temperature":0.2}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1,"position":[2100,-380],"id":"c47628c7-4ad2-4582-82aa-09d0b1346fa4","name":"OpenAI Chat Model1","credentials":{"openAiApi":{"id":"lg3WEXtgqxQtkuGE","name":"OpenAi account"}}},{"parameters":{"jsonSchemaExample":"[\n  {\n  \t\"title\": \"Youtube Title\",\n  \t\"url\":\"https://youtube.com\"\n  }\n]"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[2700,-360],"id":"676fadda-0d70-472e-b9ec-e2e9316adafc","name":"Structured Output Parser"},{"parameters":{"authentication":"webhook","content":"=입력 영상: {{ $('Extract Video ID').item.json.pageUrl }}\n\n📝 요약\n{{ $json.response.text }}\n\n🚀 관련 추천 영상 \n1️⃣ {{ $json.output[0].title }}\n({{ $json.output[0].url }})\n\n2️⃣ {{ $json.output[1].title }}\n({{ $json.output[1].url }})\n\n3️⃣ {{ $json.output[2].title }}\n({{ $json.output[2].url }})\n\n대본 링크\nhttps://drive.google.com/file/d/{{ $json.id }}/view","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[3140,-340],"id":"47f71002-b051-4b36-a3ec-f10f895fe872","name":"Discord","credentials":{"discordWebhookApi":{"id":"M4cu5blRkwIU4Qkv","name":"Discord Webhook account"}}},{"parameters":{"mode":"combine","combineBy":"combineByPosition","numberInputs":3,"options":{}},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[2960,-380],"id":"3887625f-137f-41d3-a673-8a347c346c3a","name":"Merge"},{"parameters":{"resource":"block","blockId":{"__rl":true,"value":"={{ $('Get updated pages').item.json.url }}","mode":"url"},"blockUi":{"blockValues":[{"type":"heading_2","textContent":"=입력 영상:  {{ $('Get updated pages').item.json.property_url }}"},{"type":"heading_2","textContent":"📝 요약"},{"textContent":"={{ $json.response.text }}"},{"type":"heading_2","textContent":"🚀 관련 추천 영상 "},{"textContent":"=1️⃣  {{ $json.output[0].title }}"},{"textContent":"={{ $json.output[0].url }}"},{"textContent":"=2️⃣  {{ $json.output[1].title }}"},{"textContent":"={{ $json.output[1].url }}"},{"textContent":"=3️⃣  {{ $json.output[2].title }}"},{"textContent":"={{ $json.output[2].url }}"},{"type":"heading_2","textContent":"대본 링크"},{"textContent":"=https://drive.google.com/file/d/{{ $json.id }}/view"}]}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3120,-80],"id":"21c31cd6-15c6-4f9d-9ca5-2fcdf01a0b3d","name":"Notion","credentials":{"notionApi":{"id":"9iU3idAnZVP72wxa","name":"Notion account"}}},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":{"__rl":true,"value":"16115667-5346-8126-834f-c027ef8fa27e","mode":"list","cachedResultName":"Notes","cachedResultUrl":"https://www.notion.so/1611566753468126834fc027ef8fa27e"},"returnAll":true,"filterType":"manual","matchType":"allFilters","filters":{"conditions":[{"key":"URL|url","condition":"contains","urlValue":"youtu"},{"key":"최종 편집 일시|last_edited_time","condition":"equals","lastEditedTime":"={{ $now.minus(1, 'minutes').toISO() }}"}]},"options":{}},"id":"c2f15a5c-663f-4be4-82f8-07820ffd2ed9","name":"Get updated pages","type":"n8n-nodes-base.notion","position":[-120,-320],"typeVersion":2.2,"credentials":{"notionApi":{"id":"9iU3idAnZVP72wxa","name":"Notion account"}}},{"parameters":{"assignments":{"assignments":[{"id":"949067b8-211f-4865-a7eb-88ddf2b4529a","name":"url","value":"={{ $json.property_url }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[200,-60],"id":"e2463e96-1edc-44a9-bd0c-a6e4353c0ea1","name":"Edit Fields"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-380,-20],"id":"b1088703-f222-486c-add7-0bc450533ef0","name":"When clicking ‘Test workflow’"},{"parameters":{"resource":"databasePage","operation":"update","pageId":{"__rl":true,"value":"={{ $('Get updated pages').item.json.url }}","mode":"url"},"propertiesUi":{"propertyValues":[{"key":"Type|select","selectValue":"YoutubeLink"},{"key":"Project|relation","relationValue":["167156675346806fa9ede8d9e404d339"]}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[3380,-80],"id":"5e1a096a-b297-438f-84fe-dc0d3a3dc9a1","name":"Notion1","credentials":{"notionApi":{"id":"9iU3idAnZVP72wxa","name":"Notion account"}}},{"parameters":{"rule":{"interval":[{"field":"minutes","minutesInterval":1}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-400,-320],"id":"48c5e196-8636-442a-a5fe-027fa9b9341c","name":"Schedule Trigger"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"859db21a-cf0f-4a18-8d9b-6aeb89c0bbae","leftValue":"={{ $json.property_updated }}","rightValue":"={{ $json.property_created }}","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[100,-300],"id":"92d4c92a-2ad6-4b04-a7d3-fcd0435f3856","name":"Filter1"},{"parameters":{"operation":"createFromText","content":"=url: {{ $('Get updated pages').item.json.property_url }}\n\n대본: {{ $('Format Transcript').item.json.transcript }}","name":"={{ $('Get updated pages').item.json.name }} \n","driveId":{"__rl":true,"value":"My Drive","mode":"list","cachedResultName":"My Drive","cachedResultUrl":"https://drive.google.com/drive/my-drive"},"folderId":{"__rl":true,"value":"1FQFUpCbBlwvl-mW9pzhRRZjnNYk6tW3F","mode":"list","cachedResultName":"youtube scripts","cachedResultUrl":"https://drive.google.com/drive/folders/1FQFUpCbBlwvl-mW9pzhRRZjnNYk6tW3F"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[2420,560],"id":"1f8f7254-b5fa-44ed-8172-16b34887d758","name":"Google Drive","credentials":{"googleDriveOAuth2Api":{"id":"KQhdpwySQgT9XrEh","name":"Google Drive account"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1,"position":[1940,160],"id":"9ad3b4d3-7fec-4da4-9732-de954d709b83","name":"OpenAI Chat Model2","credentials":{"openAiApi":{"id":"lg3WEXtgqxQtkuGE","name":"OpenAi account"}}},{"parameters":{"options":{"summarizationMethodAndPrompts":{"values":{"prompt":"Write a concise summary of the following in korean:\n\n\n\"{text}\"\n\n\nCONCISE SUMMARY:"}}}},"type":"@n8n/n8n-nodes-langchain.chainSummarization","typeVersion":2,"position":[1880,-100],"id":"67e2eeac-e0fe-40e6-96cd-10db85f6dc45","name":"Summarization Chain"}],"connections":{"Extract Video ID":{"main":[[{"node":"Fetch YouTube Page","type":"main","index":0}]]},"Fetch YouTube Page":{"main":[[{"node":"Extract Transcript URL","type":"main","index":0}]]},"Extract Transcript URL":{"main":[[{"node":"Fetch Transcript","type":"main","index":0}],[]]},"Fetch Transcript":{"main":[[{"node":"Format Transcript","type":"main","index":0}]]},"Format Transcript":{"main":[[{"node":"Information Extractor","type":"main","index":0},{"node":"Google Drive","type":"main","index":0},{"node":"Summarization Chain","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"HTTP Request":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Information Extractor":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"OpenAI Chat Model1":{"ai_languageModel":[[{"node":"Information Extractor","type":"ai_languageModel","index":0}]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"AI Agent","type":"ai_outputParser","index":0}]]},"AI Agent":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Discord":{"main":[[]]},"Merge":{"main":[[{"node":"Discord","type":"main","index":0},{"node":"Notion","type":"main","index":0}]]},"Get updated pages":{"main":[[{"node":"Filter1","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Extract Video ID","type":"main","index":0}]]},"When clicking ‘Test workflow’":{"main":[[{"node":"Get updated pages","type":"main","index":0}]]},"Notion":{"main":[[{"node":"Notion1","type":"main","index":0}]]},"Schedule Trigger":{"main":[[{"node":"Get updated pages","type":"main","index":0}]]},"Filter1":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Notion1":{"main":[[]]},"Google Drive":{"main":[[{"node":"Merge","type":"main","index":2}]]},"OpenAI Chat Model2":{"ai_languageModel":[[{"node":"Summarization Chain","type":"ai_languageModel","index":0}]]},"Summarization Chain":{"main":[[{"node":"Merge","type":"main","index":1}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]}},"meta":null,"pinData":{},"versionId":"7938cbed-7443-4b3b-a0e9-1cfc3b0a7da8","triggerCount":1,"tags":[]}